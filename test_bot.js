const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const readlineSync = require("readline-sync");
const sharp = require('sharp');
const screenshotConfig = require("./screenshotConfig");

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
const ACCOUNTS = require("./accounts.json");

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ —Ö–∞—Ä–¥–∫–æ–¥)
const DEFAULT_API_ID = ACCOUNTS[0]?.api_id || 22482713;
const DEFAULT_API_HASH = ACCOUNTS[0]?.api_hash || "76343050cd0b4d8e3cc95b9ceee667fe";

let clients = [];

// === –£—Ç–∏–ª–∏—Ç—ã ===
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// === –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏ –í–ö ===
function parseVkPostUrl(url) {
    const match = url.match(/vk\.com\/wall(-?\d+)_(\d+)/i);
    if (!match) return null;

    return {
        ownerId: match[1],
        postId: match[2],
        fullId: `${match[1]}_${match[2]}`,
    };
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ===
async function generateScreenshot(url) {
    try {
        const apiKey = '4110c0';
        const { viewport, clip } = screenshotConfig;
        const apiUrl = `https://api.screenshotmachine.com?key=${apiKey}&url=${
            encodeURIComponent(url)
        }&dimension=${
            viewport.width
        }x${
            viewport.height
        }&device=desktop&format=jpg&delay=2000`;
        console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç: ${url}`);
        
        const screenshotDir = path.resolve(__dirname, 'screenshots');
        if (!fs.existsSync(screenshotDir)) {
            fs.mkdirSync(screenshotDir);
        }

        const response = await axios.get(apiUrl, {
            responseType: 'arraybuffer',
            timeout: 30000
        });

        const outputPath = path.join(screenshotDir, `screenshot_${Date.now()}.jpg`);

        await sharp(response.data)
            .extract({
                left: Math.round(clip.x),
                top: Math.round(clip.y),
                width: Math.round(clip.width),
                height: Math.round(clip.height),
            })
            .toFile(outputPath);

        console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
        return outputPath;

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        return null;
    }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö ===
async function getVkUserId(vkToken) {
    try {
        const res = await axios.get("https://api.vk.com/method/users.get", {
            params: {
                v: "5.199",
                access_token: vkToken,
            },
        });

        const user = res.data.response?.[0];
        if (!user) throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö");

        return Math.abs(user.id);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –í–ö:", err.message);
        return null;
    }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
async function initClient(accountConfig) {
    try {
        const client = new TelegramClient(
            new StringSession(accountConfig.session),
            accountConfig.api_id || DEFAULT_API_ID,
            accountConfig.api_hash || DEFAULT_API_HASH,
            { connectionRetries: 5 }
        );

        await client.start({
            phoneNumber: () => Promise.resolve(""),
            password: () => Promise.resolve(""),
            phoneCode: () => Promise.resolve(""),
            onError: (err) => console.log(err),
        });

        if (!(await client.isUserAuthorized())) {
            console.warn(`‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${accountConfig.id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
            return null;
        }

        const self = await client.getMe();
        console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${accountConfig.id} (${self.username}) –ø–æ–¥–∫–ª—é—á–µ–Ω`);

        // –ü–æ–ª—É—á–∞–µ–º VK ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        let vkUserId = accountConfig.vk_user_id;
        if (!vkUserId && accountConfig.vk_token) {
            vkUserId = await getVkUserId(accountConfig.vk_token);
        }

        return {
            id: accountConfig.id,
            client,
            username: self.username,
            chat_id: accountConfig.chat_id,
            vk_user_id: vkUserId,
            api_id: accountConfig.api_id || DEFAULT_API_ID,
            api_hash: accountConfig.api_hash || DEFAULT_API_HASH
        };

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountConfig.id}:`, err.message);
        return null;
    }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ===
async function checkChatAccess(client, chatId) {
    try {
        await client.getInputEntity(chatId);
        return true;
    } catch (err) {
        console.error(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ${chatId}:`, err.message);
        return false;
    }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç ===
async function sendToChat(clientObj, chatId, link, imagePath) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        if (!(await checkChatAccess(clientObj.client, chatId))) {
            return false;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await clientObj.client.sendMessage(chatId, {
            message: link
        });
        console.log(`üì® [${clientObj.username}] –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${chatId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (imagePath) {
            await clientObj.client.sendFile(chatId, {
                file: imagePath
            });
            console.log(`üñºÔ∏è [${clientObj.username}] –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
            fs.unlinkSync(imagePath);
        }

        return true;
    } catch (err) {
        console.error(`‚ùå [${clientObj.username}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, err.message);
        return false;
    }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ ===
async function processVkLink(link) {
    try {
        const parsed = parseVkPostUrl(link);
        if (!parsed) {
            console.warn(`üö´ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${link}`);
            return;
        }

        const ownerVkId = Math.abs(parseInt(parsed.ownerId));
        console.log(`üîç –ü–æ—Å—Ç –æ—Ç VK ID: ${ownerVkId}`);

        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        let targetAccount = null;
        
        for (const acc of ACCOUNTS) {
            if (!acc.vk_token) continue;
            
            try {
                const accVkId = acc.vk_user_id || await getVkUserId(acc.vk_token);
                if (accVkId === ownerVkId) {
                    console.log(`üéØ –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: ${acc.id} –¥–ª—è VK ID ${ownerVkId}`);
                    targetAccount = acc;
                    break;
                }
            } catch (err) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${acc.id}:`, err.message);
            }
        }

        if (!targetAccount) {
            console.warn(`üö´ –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è VK ID ${ownerVkId}`);
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        let clientObj = clients.find(c => c.id === targetAccount.id);
        if (!clientObj) {
            clientObj = await initClient(targetAccount);
            if (clientObj) clients.push(clientObj);
        }

        if (!clientObj) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ${targetAccount.id}`);
            return;
        }

        // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const targetChatId = clientObj.chat_id || targetAccount.chat_id;
        console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç: ${targetChatId}`);
        
        const screenshotPath = await generateScreenshot(link);
        await sendToChat(clientObj, targetChatId, link, screenshotPath);

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, err.message);
    }
}

// === CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===

async function processFromStdin() {
    return new Promise((resolve) => {
        let data = '';
        
        process.stdin.setEncoding('utf8');
        
        process.stdin.on('data', (chunk) => {
            data += chunk;
        });

        process.stdin.on('end', async () => {
            // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            const links = data.split(' ')
                .map(link => link.trim())
                .filter(link => link.includes('vk.com/wall'));
            
            if (links.length === 0) {
                console.log("‚ùå –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                return resolve(false);
            }

            console.log(`\n–û–±—Ä–∞–±–æ—Ç–∫–∞ ${links.length} —Å—Å—ã–ª–æ–∫...`);
            for (const link of links) {
                await processVkLink(link);
                await delay(1000);
            }

            console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ");
            resolve(true);
        });
    });
}
// === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
(async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ACCOUNTS.forEach(acc => {
            if (!acc.api_id || !acc.api_hash) {
                console.log(`‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç ${acc.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ API credentials`);
            }
        });

       
    } catch (err) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err);
        process.exit(1);
    }
})();