const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const sharp = require('sharp');
const express = require("express");
const screenshotConfig = require("./screenshotConfig");

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
const ACCOUNTS = require("./accounts.json");

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const DEFAULT_API_ID = ACCOUNTS[0]?.api_id || 22482713;
const DEFAULT_API_HASH = ACCOUNTS[0]?.api_hash || "76343050cd0b4d8e3cc95b9ceee667fe";

let clients = [];
const app = express();
const PORT = process.env.PORT || 3001;

// === –£—Ç–∏–ª–∏—Ç—ã ===
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// === –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏ –í–ö ===
function parseVkPostUrl(url) {
    const match = url.match(/vk\.com\/wall(-?\d+)_(\d+)/i);
    if (!match) return null;

    return {
        ownerId: match[1],
        postId: match[2],
        fullId: `${match[1]}_${match[2]}`,
    };
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ===
async function generateScreenshot(url) {
    try {
        const apiKey = '4110c0';
        const { viewport, clip } = screenshotConfig;
        const apiUrl = `https://api.screenshotmachine.com?key=${apiKey}&url=${
            encodeURIComponent(url)
        }&dimension=${
            viewport.width
        }x${
            viewport.height
        }&device=desktop&format=jpg&delay=2000`;
        console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç: ${url}`);
        
        const screenshotDir = path.resolve(__dirname, 'screenshots');
        if (!fs.existsSync(screenshotDir)) {
            fs.mkdirSync(screenshotDir);
        }

        const response = await axios.get(apiUrl, {
            responseType: 'arraybuffer',
            timeout: 30000
        });

        const outputPath = path.join(screenshotDir, `screenshot_${Date.now()}.jpg`);

        await sharp(response.data)
            .extract({
                left: Math.round(clip.x),
                top: Math.round(clip.y),
                width: Math.round(clip.width),
                height: Math.round(clip.height),
            })
            .toFile(outputPath);

        console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
        return outputPath;

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        return null;
    }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö ===
async function getVkUserId(vkToken) {
    try {
        const res = await axios.get("https://api.vk.com/method/users.get", {
            params: {
                v: "5.199",
                access_token: vkToken,
            },
        });

        const user = res.data.response?.[0];
        if (!user) throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö");

        return Math.abs(user.id);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –í–ö:", err.message);
        return null;
    }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
async function initClient(accountConfig) {
    try {
        const client = new TelegramClient(
            new StringSession(accountConfig.session),
            accountConfig.api_id || DEFAULT_API_ID,
            accountConfig.api_hash || DEFAULT_API_HASH,
            { connectionRetries: 5 }
        );

        await client.start({
            phoneNumber: () => Promise.resolve(""),
            password: () => Promise.resolve(""),
            phoneCode: () => Promise.resolve(""),
            onError: (err) => console.log(err),
        });

        if (!(await client.isUserAuthorized())) {
            console.warn(`‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${accountConfig.id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
            return null;
        }

        const self = await client.getMe();
        console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${accountConfig.id} (${self.username}) –ø–æ–¥–∫–ª—é—á–µ–Ω`);

        // –ü–æ–ª—É—á–∞–µ–º VK ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        let vkUserId = accountConfig.vk_user_id;
        if (!vkUserId && accountConfig.vk_token) {
            vkUserId = await getVkUserId(accountConfig.vk_token);
        }

        return {
            id: accountConfig.id,
            client,
            username: self.username,
            chat_id: accountConfig.chat_id,
            vk_user_id: vkUserId,
            api_id: accountConfig.api_id || DEFAULT_API_ID,
            api_hash: accountConfig.api_hash || DEFAULT_API_HASH
        };

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountConfig.id}:`, err.message);
        return null;
    }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ===
async function checkChatAccess(client, chatId) {
    try {
        await client.getInputEntity(chatId);
        return true;
    } catch (err) {
        console.error(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ${chatId}:`, err.message);
        return false;
    }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç ===
async function sendToChat(clientObj, chatId, link, imagePath) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        if (!(await checkChatAccess(clientObj.client, chatId))) {
            return false;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await clientObj.client.sendMessage(chatId, {
            message: link
        });
        console.log(`üì® [${clientObj.username}] –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${chatId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (imagePath) {
            await clientObj.client.sendFile(chatId, {
                file: imagePath
            });
            console.log(`üñºÔ∏è [${clientObj.username}] –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
            fs.unlinkSync(imagePath);
        }

        return true;
    } catch (err) {
        console.error(`‚ùå [${clientObj.username}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, err.message);
        return false;
    }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ ===
async function processVkLink(link) {
    try {
        const parsed = parseVkPostUrl(link);
        if (!parsed) {
            console.warn(`üö´ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${link}`);
            return;
        }

        const ownerVkId = Math.abs(parseInt(parsed.ownerId));
        console.log(`üîç –ü–æ—Å—Ç –æ—Ç VK ID: ${ownerVkId}`);

        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ (–±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        let targetAccount = null;
        
        for (const acc of ACCOUNTS) {
            if (!acc.vk_token) continue;
            
            try {
                // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–π vk_user_id
                if (acc.vk_user_id && Math.abs(acc.vk_user_id) === ownerVkId) {
                    targetAccount = acc;
                    break;
                }
                
                // –ï—Å–ª–∏ vk_user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ API VK
                if (!acc.vk_user_id) {
                    const accVkId = await getVkUserId(acc.vk_token);
                    if (accVkId === ownerVkId) {
                        targetAccount = acc;
                        break;
                    }
                }
            } catch (err) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${acc.id}:`, err.message);
            }
        }

        if (!targetAccount) {
            console.warn(`üö´ –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è VK ID ${ownerVkId}`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        let clientObj = clients.find(c => c.id === targetAccount.id);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
        if (!clientObj) {
            console.log(`‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç ${targetAccount.id}...`);
            clientObj = await initClient(targetAccount);
            if (clientObj) {
                clients.push(clientObj);
            } else {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ${targetAccount.id}`);
                return;
            }
        }

        // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const targetChatId = clientObj.chat_id || targetAccount.chat_id;
        console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç: ${targetChatId}`);
        
        const screenshotPath = await generateScreenshot(link);
        await sendToChat(clientObj, targetChatId, link, screenshotPath);

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, err.message);
    }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
async function initializeClients() {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ACCOUNTS.forEach(acc => {
            if (!acc.api_id || !acc.api_hash) {
                console.log(`‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç ${acc.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ API credentials`);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for (const account of ACCOUNTS) {
            const client = await initClient(account);
            if (client) {
                clients.push(client);
            }
            await delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        }

        console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ ${ACCOUNTS.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
    } catch (err) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:", err);
        process.exit(1);
    }
}

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express ===
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// API endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
app.post('/api/process', async (req, res) => {
    try {
        const { links } = req.body;
        
        if (!Array.isArray(links) || links.length === 0) {
            return res.status(400).json({ 
                status: 'error', 
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫' 
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
        const results = [];
        for (const link of links) {
            try {
                await processVkLink(link);
                results.push({ link, status: 'success' });
                await delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫
            } catch (error) {
                results.push({ 
                    link, 
                    status: 'error', 
                    message: error.message 
                });
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const successCount = results.filter(r => r.status === 'success').length;
        const message = `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –∏–∑ ${links.length}`;

        res.json({
            status: 'success',
            message,
            results
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ API:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'Index.html'));
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    for (const client of clients) {
        await client.client.disconnect();
    }
    process.exit();
});
// === CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
async function processFromStdin() {
    return new Promise((resolve) => {
        let data = '';
        
        process.stdin.setEncoding('utf8');
        
        process.stdin.on('data', (chunk) => {
            data += chunk;
        });

        process.stdin.on('end', async () => {
            // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            const links = data.split(/\s+/)
                .map(link => link.trim())
                .filter(link => link.includes('vk.com/wall'));
            
            if (links.length === 0) {
                console.log("‚ùå –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                return resolve(false);
            }

            console.log(`\n–û–±—Ä–∞–±–æ—Ç–∫–∞ ${links.length} —Å—Å—ã–ª–æ–∫...`);
            for (const link of links) {
                await processVkLink(link);
                await delay(1000);
            }

            console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ");
            resolve(true);
        });
    });
}

// === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
(async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        ACCOUNTS.forEach(acc => {
            if (!acc.api_id || !acc.api_hash) {
                console.log(`‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç ${acc.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ API credentials`);
            }
        });

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if (process.argv.includes('--server')) {
            // –†–µ–∂–∏–º —Å–µ—Ä–≤–µ—Ä–∞
            app.listen(PORT, () => {
                console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
                console.log(`–ê–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏`);
            });
        } else if (process.stdin.isTTY) {
            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            console.log("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ stdin –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --server –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            process.exit(0);
        } else {
            // –†–µ–∂–∏–º CLI (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ stdin)
            await processFromStdin();
            
            // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            for (const client of clients) {
                await client.client.disconnect();
            }
            process.exit(0);
        }
    } catch (err) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err);
        process.exit(1);
    }
})();